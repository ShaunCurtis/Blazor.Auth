@implements IDisposable
@namespace Blazor.Auth.Shared

@using Blazor.Auth
@using System.Security.Claims;

<span class="me-2">Change User:</span>
<div class="w-25">
    <select id="userselect" class="form-control" @onchange="ChangeUser">
        @foreach (var value in TestIdentityProvider.GetTestIdentities())
        {
            @if (value == _currentUserName)
            {
                <option value="@value" selected>@value</option>
            }
            else
            {
                <option value="@value">@value</option>
            }
        }
    </select>
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthTask { get; set; } = default!;

    [Inject] private AuthenticationStateProvider authState { get; set; } = default!;
    private SimpleAuthenticationStateProvider AuthState => (SimpleAuthenticationStateProvider)authState!;

    private ClaimsPrincipal user = new ClaimsPrincipal();
    private string _currentUserName = "None";

    protected async override Task OnInitializedAsync()
    {
        if (AuthTask is null)
            throw new ArgumentNullException("There's no cascaded Task<AuthenticationState> provided!");

        var authState = await AuthTask;
        this.user = authState.User;
        AuthState.AuthenticationStateChanged += this.OnUserChanged;
    }

    private async Task ChangeUser(ChangeEventArgs e)
        => await AuthState.ChangeIdentityAsync(e.Value?.ToString() ?? string.Empty);

    private async void OnUserChanged(Task<AuthenticationState> state)
        => await this.GetUser(state);

    private async Task GetUser(Task<AuthenticationState> state)
    {
        var authState = await state;
        this.user = authState.User;
    }

    public void Dispose()
        => AuthState.AuthenticationStateChanged -= this.OnUserChanged;
}

